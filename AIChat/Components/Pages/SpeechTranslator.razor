@page "/speech-translator"
@using AIChat.Models
@using AIChat.Services
@using Microsoft.AspNetCore.Components.Web

@inject IJSRuntime JS
@inject ISpeechService SpeechService

@rendermode InteractiveServer

<h3 class="speech-title">Speech Translator</h3>

<div class="speech-container">
    <div class="speech-controls">
        <div class="speech-row">
            <label for="targetLang" class="speech-label">Target Language</label>
            <select id="targetLang" class="speech-select" @bind="TargetLang">
                <option value="ta">Tamil</option>
                <option value="hi">Hindi</option>
            </select>
        </div>
        <div class="speech-row search-bar-row">
            <input class="speech-search-input" @bind="TypedText" @onkeydown="OnInputKeyDown" placeholder="Type or speak in English..." />
            <button class="btn speech-mic-btn" @onclick="StartListening" disabled="@IsListening">
                <span>@(IsListening ? "🎤" : "🎙️")</span>
            </button>
            <button class="btn btn-primary speech-search-btn" @onclick="TranslateTypedText" disabled="@IsListening || string.IsNullOrWhiteSpace(TypedText)">Translate</button>
        </div>
        <div class="speech-row">
            <audio controls @ref="audioRef" src="@AudioUrl" type="audio/wav"></audio>
        </div>
    </div>
    <div class="speech-messages">
        <ul class="speech-list">
            @foreach (var item in Messages)
            {
                <li class="speech-list-item">
                    <b>🗣️ You:</b> @item.Original <br />
                    <b>🌐 Translated:</b> @item.Translated
                </li>
            }
        </ul>
    </div>
</div>

<style>
.speech-container {
    max-width: 600px;
    margin: auto;
    padding: 20px;
    background: #fff;
    border-radius: 12px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.04);
    display: flex;
    flex-direction: column;
    gap: 18px;
}
.speech-title {
    text-align: center;
    color: #0d6efd;
    font-size: 1.7rem;
    font-weight: bold;
    margin-bottom: 24px;
}
.speech-controls {
    display: flex;
    flex-direction: column;
    gap: 12px;
    margin-bottom: 10px;
}
.speech-row {
    display: flex;
    align-items: center;
    gap: 12px;
}
.speech-label {
    font-weight: 500;
    color: #0d6efd;
    margin-right: 8px;
}
.speech-select {
    padding: 6px 12px;
    border-radius: 6px;
    border: 1px solid #ccc;
    font-size: 1rem;
}
.speech-search-input {
    flex: 1;
    padding: 8px 12px;
    border-radius: 6px;
    border: 1px solid #ccc;
    font-size: 1.1rem;
    outline: none;
}
.speech-mic-btn {
    background: #fff;
    border: 1px solid #0d6efd;
    color: #0d6efd;
    border-radius: 50%;
    width: 44px;
    height: 44px;
    font-size: 1.3rem;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-left: 4px;
    margin-right: 4px;
    transition: background 0.2s;
}
.speech-mic-btn:disabled {
    opacity: 0.6;
}
.speech-mic-btn:hover:not(:disabled) {
    background: #e7f1ff;
}
.speech-search-btn {
    min-width: 100px;
    background-color: #0d6efd;
    border-color: #0d6efd;
    color: #fff;
    font-weight: 500;
    border-radius: 6px;
    padding: 8px 16px;
    transition: background 0.2s;
}
.speech-search-btn:disabled {
    opacity: 0.6;
}
.speech-search-btn:hover:not(:disabled) {
    background-color: #0b5ed7;
    border-color: #0a58ca;
}
.speech-messages {
    height: 320px;
    overflow-y: auto;
    background: #f8f9fa;
    border-radius: 8px;
    padding: 14px;
    box-shadow: 0 1px 4px rgba(0,0,0,0.03);
}
.speech-list {
    list-style: none;
    padding: 0;
    margin: 0;
}
.speech-list-item {
    margin-bottom: 16px;
    padding-bottom: 8px;
    border-bottom: 1px solid #e3e3e3;
    color: #333;
}
.speech-list-item:last-child {
    border-bottom: none;
}
.speech-row audio {
    width: 100%;
    border-radius: 6px;
    background: #e9ecef;
}
.search-bar-row {
    margin-top: 8px;
    margin-bottom: 8px;
    width: 100%;
}
</style>

@code {


    private string TargetLang { get; set; } = "ta";
    private bool IsListening { get; set; } = false;
    private ElementReference audioRef;
    private string AudioUrl { get; set; }
    private byte[]? AudioData { get; set; }
    private List<ChatItem> Messages { get; set; } = new();
    private string TypedText { get; set; } = string.Empty;

    private async Task TranslateTypedText()
    {
        if (string.IsNullOrWhiteSpace(TypedText)) return;
        try
        {
            var response = await SpeechService.TranslateTextAsync(TypedText, TargetLang);
            Messages.Add(new ChatItem(response.RecognizedText, response.TranslatedText));
            AudioData = response.Audio;
            AudioUrl = AudioData != null && AudioData.Length > 0 ? $"data:audio/wav;base64,{Convert.ToBase64String(AudioData)}" : null;
            TypedText = string.Empty;
            await InvokeAsync(StateHasChanged);
            await Task.Delay(100);
            await JS.InvokeVoidAsync("audioInterop.playAudio", audioRef);
        }
        catch (Exception ex)
        {
            Messages.Add(new ChatItem("❌ Error", ex.Message));
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task OnInputKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await TranslateTypedText();
        }
    }

    private async Task StartListening()
    {
        IsListening = true;
        AudioUrl = null;
        AudioData = null;

        await SpeechService.StartContinuousTranslationAsync(
            TargetLang,
            OnTranslationReceived,
            OnTranslationCompleted,
            OnTranslationError);
    }

    private async void OnTranslationReceived(string recognized, string translated)
    {
        Messages.Add(new ChatItem(recognized, translated));
        AudioData = await SpeechService.SynthesizeAsync(translated, TargetLang);
        AudioUrl = $"data:audio/wav;base64,{Convert.ToBase64String(AudioData)}";
        await InvokeAsync(StateHasChanged);
        await Task.Delay(100);
        await JS.InvokeVoidAsync("audioInterop.playAudio", audioRef);
    }

    private void OnTranslationCompleted()
    {
        IsListening = false;
    }

    private void OnTranslationError(string error)
    {
        IsListening = false;
        Messages.Add(new ChatItem("❌ Error", error));
        StateHasChanged();
    }
}