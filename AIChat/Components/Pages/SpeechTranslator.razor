@page "/speech-translator"
@using AIChat.Services

@inject IJSRuntime JS
@inject ISpeechService SpeechService

@rendermode InteractiveServer

<h3 class="speech-title">Speech Translator</h3>

<div class="speech-container">
    <div class="speech-controls">
        <div class="speech-row">
            <label for="targetLang" class="speech-label">Target Language</label>
            <select id="targetLang" class="speech-select" @bind="TargetLang">
                <option value="ta">Tamil</option>
                <option value="hi">Hindi</option>
            </select>
        </div>
        <div class="speech-row">
            @if (IsListening)
            {
                <span class="badge bg-success animate-glow">🎤 Listening...</span>
            }
            else
            {
                <button class="btn btn-primary speech-btn" @onclick="StartListening">Start Listening</button>
            }
        </div>
        <div class="speech-row">
            <audio controls @ref="audioRef" src="@AudioUrl" type="audio/wav"></audio>
        </div>
    </div>
    <div class="speech-messages">
        <ul class="speech-list">
            @foreach (var item in Messages)
            {
                <li class="speech-list-item">
                    <b>🗣️ You:</b> @item.Original <br />
                    <b>🌐 Translated:</b> @item.Translated
                </li>
            }
        </ul>
    </div>
</div>

<style>
.speech-container {
    max-width: 600px;
    margin: auto;
    padding: 20px;
    background: #fff;
    border-radius: 12px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.04);
    display: flex;
    flex-direction: column;
    gap: 18px;
}
.speech-title {
    text-align: center;
    color: #0d6efd;
    font-size: 1.7rem;
    font-weight: bold;
    margin-bottom: 24px;
}
.speech-controls {
    display: flex;
    flex-direction: column;
    gap: 12px;
    margin-bottom: 10px;
}
.speech-row {
    display: flex;
    align-items: center;
    gap: 12px;
}
.speech-label {
    font-weight: 500;
    color: #0d6efd;
    margin-right: 8px;
}
.speech-select {
    padding: 6px 12px;
    border-radius: 6px;
    border: 1px solid #ccc;
    font-size: 1rem;
}
.speech-btn {
    min-width: 140px;
    background-color: #0d6efd;
    border-color: #0d6efd;
    color: #fff;
    font-weight: 500;
    border-radius: 6px;
    padding: 8px 20px;
    transition: background 0.2s;
}
.speech-btn:hover:not(:disabled) {
    background-color: #0b5ed7;
    border-color: #0a58ca;
}
.speech-messages {
    height: 320px;
    overflow-y: auto;
    background: #f8f9fa;
    border-radius: 8px;
    padding: 14px;
    box-shadow: 0 1px 4px rgba(0,0,0,0.03);
}
.speech-list {
    list-style: none;
    padding: 0;
    margin: 0;
}
.speech-list-item {
    margin-bottom: 16px;
    padding-bottom: 8px;
    border-bottom: 1px solid #e3e3e3;
    color: #333;
}
.speech-list-item:last-child {
    border-bottom: none;
}
.speech-row audio {
    width: 100%;
    border-radius: 6px;
    background: #e9ecef;
}
</style>

@code {
    // Represents a chat message with original and translated text
    public class ChatItem
    {
        public string Original { get; set; }
        public string Translated { get; set; }
        public ChatItem(string original, string translated)
        {
            Original = original;
            Translated = translated;
        }
    }

    string TargetLang = "ta";
    bool IsListening = false;
    ElementReference audioRef;
    string AudioUrl;
    byte[]? AudioData;
    List<ChatItem> Messages = new();

    // Starts speech translation and handles results
    async Task StartListening()
    {
        IsListening = true;
        AudioUrl = null;
        AudioData = null;

        await SpeechService.StartContinuousTranslationAsync(
            TargetLang,
            OnTranslationReceived,
            OnTranslationCompleted,
            OnTranslationError);
    }

    // Handles translation results
    private async void OnTranslationReceived(string recognized, string translated)
    {
        Messages.Add(new ChatItem(recognized, translated));
        AudioData = await SpeechService.SynthesizeAsync(translated, TargetLang);
        AudioUrl = $"data:audio/wav;base64,{Convert.ToBase64String(AudioData)}";
        await InvokeAsync(StateHasChanged);
        await Task.Delay(100); // Let UI render
        await JS.InvokeVoidAsync("audioInterop.playAudio", audioRef);
    }

    // Handles completion
    private void OnTranslationCompleted()
    {
        IsListening = false;
    }

    // Handles errors
    private void OnTranslationError(string error)
    {
        IsListening = false;
        Messages.Add(new ChatItem("❌ Error", error));
        StateHasChanged();
    }
}