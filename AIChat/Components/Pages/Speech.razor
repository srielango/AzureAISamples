@page "/speech"
@using AIChat.Services

@inject IJSRuntime JS
@inject NewSpeechService SpeechService

@rendermode InteractiveServer

@implements IDisposable

<PageTitle>Speech Translator</PageTitle>

<div class="p-4">
    <h3 class="text-xl font-semibold mb-4">Speech Translator</h3>

    <div class="mb-4">
        <label class="block mb-1 font-medium">From Language:</label>
        <select class="border border-gray-300 p-2 rounded w-full" @bind="FromLanguage">
            @foreach (var lang in Languages)
            {
                <option value="@lang">@lang</option>
            }
        </select>
    </div>

    <div class="mb-4">
        <label class="block mb-1 font-medium">To Language:</label>
        <select class="border border-gray-300 p-2 rounded w-full" @bind="ToLanguage">
            @foreach (var lang in Languages)
            {
                <option value="@lang">@lang</option>
            }
        </select>
    </div>

    <div class="mb-4">
        <button class="bg-blue-500 px-4 py-2 rounded mr-2" @onclick="StartRecording">Start</button>
        <button class="bg-red-500 px-4 py-2 rounded" @onclick="StopRecording">Stop</button>
    </div>

    <div class="mb-4">
        <label class="block mb-1 font-medium">Recognized Text:</label>
        <textarea class="border border-gray-300 p-2 rounded w-full" rows="3" readonly>@RecognizedText</textarea>
    </div>

    <div class="mb-4">
        <label class="block mb-1 font-medium">Translated Text:</label>
        <textarea class="border border-gray-300 p-2 rounded w-full" rows="3" readonly>@TranslatedText</textarea>
    </div>
</div>

@code {
    private DotNetObjectReference<Speech>? dotNetHelper;

    private string FromLanguage = "en";
    private string ToLanguage = "ta";
    private string RecognizedText = string.Empty;
    private string TranslatedText = string.Empty;

    private List<string> Languages = new List<string>
    {
        "en", "ta", "fr", "de", "es", "hi", "te", "ml", "zh"
    };

    protected override void OnInitialized()
    {
        dotNetHelper = DotNetObjectReference.Create(this);
    }

    private async Task StartRecording()
    {
        RecognizedText = string.Empty;
        TranslatedText = string.Empty;
        await JS.InvokeVoidAsync("startRecording");
    }

    private async Task StopRecording()
    {
        await JS.InvokeVoidAsync("stopRecording", dotNetHelper);
    }

    [JSInvokable("OnAudioCaptured")]
    public async Task OnAudioCaptured(string base64Audio)
    {
        var result = await SpeechService.ProcessAudioAsync(base64Audio, FromLanguage, ToLanguage);
        RecognizedText = result.RecognizedText;
        TranslatedText = result.TranslatedText;
        StateHasChanged();
    }

    public void Dispose()
    {
        dotNetHelper?.Dispose();
    }
}
